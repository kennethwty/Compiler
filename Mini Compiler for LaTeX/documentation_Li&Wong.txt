\begin{document}
\pagenumbering{Roman}
\Roman{5}
\renewcommand{\baselinestretch}{1}
\tableofcontents

\section{Introduction to Project III}

This is a documentation for the third and final part of the semester project.
This part of the project mostly focuses on the actual generation of formatted text from
LaTeX input file.



\subsection{Team Members}

\begin{single}
\begin{enumerate}
\item Tsz Yan Wong
\item Qiyu Li
\end{enumerate}
\end{single}

\section{Assumption}
When our team was implementing the compiler, there are some assumptions that we made in order to
move on smoothly and quickly without getting stuck on a single problem for too long. We also approached
problems in, not only one, but several ways just to find the best solution that fits the most.

\noindent
For example, when dealing with the page numbering, we had to decide on the amount of lines to count as a single page as well as how to display it in a way that is easy and clear to read. We decided to have 10 lines a page when testing and adjusted it back to 40 lines per page at the end to decrease the number of times that the page number shows up. We assumed that we could insert a statement " -- page x -- " anywhere in the generated document to indicate the page number and so decided to have several newlines between pages and within those newlines we insert the page number statement.

\noindent
Another assumption was that we assumed the page numbering style also applies to section header number as well and not just applies to the actual page numbers. What we mean by this is that if the user changes the page numbering style to upper case roman (Roman), the generated document must have upper case roman as the style of the page numbers (for example, page 1 becomes page I) and it must also have upper case roman style on section header number (for example, "1.1 Introduction" would become "I.I Introduction"). The coherence makes the document look more uniformed.

\noindent
The third assumption we had made was that the right justification token would look like  right. We then created a token in our files to recognize it so that paragraphs would be right justified and aligned.

\noindent
The fourth assumption is that in the latex, all the paragraphs are right justification. Those paragraphs are outside the begin-end blocks.

\section{Design Log}

There are many MAJOR design steps that we made throughout the project such as the followings:

\begin{single}
\begin{itemize}
\item Figured out how to make use of dollar sign and yytext to pass up values.
\item Figured out how linespacing single/double/trible should be implemented.
\item Figured out how to change fonts to italic 
\item Figured out how nested blocks should be produce.
\item Figured out how itemize and enumerate work, even in nested situations.
\item Figured out how to recognize the page numbering style and applied to page number and section header
\item Figured out how to center passage in paragraph and tables
\end{itemize}
\end{single}

\subsection{Encountered Problems and Solutions}

Throughout the project, we've encountered many different problems ranging from small bugs to big design problems. At the beginning, we had no idea how to approach the problems and had no idea how to implement the LaTeX commands. We spent time every week asking questions and finding solutions to our problems. We do not have much experience in C programming so this project gave both of us a hard time starting out. However, once we got started, everything seemed to be cleared out a lot and were moving smoothly for a while before hitting another wall.

\noindent
Since both of us had no experience in LaTeX word processing before taking this class, it also gave us a hard time understand how some commands work. Although we have the latex.all.txt file to help guide us into some directions, we still felt lost for quite a long time since project 1. There are also some commands in the manual that were explained very clearly and there were not many good articles out there that explain them, which was very tough.

\noindent
When we first started the project, we also had a difficult time compiling the source codes, but fortunately enough that some other students in class found a way to bypass that and fix the problem. For example, compiling the file using Bison without the -d option would not produce the right executable at the beginning. Also, we had to modify the provided source codes a bit to get it going because there were some errors in it that kept producing error messages and prevented us from moving forward.

\subsection{Aspect of Project - Easy vs. Hard}

There were some easy parts such as adding function calls to the latexp3c.y file and adding new tools and functions in the util.c file. However, getting to these parts weren't easy at all because we had to understand the grammar's in and out and know where to place the right function calls in the grammar to produce the optimum result that we were looking for. Also, since we did not have too much experience in C programming, we needed to spend time learning the programming language and then tried to implement the commands with the newly acquired knowledge. Strings in C is quite different than that in Java, and it took us a while to figure it out. Another difficult task was to figure out how to pass up values thru dollar sign.



\end{document}
